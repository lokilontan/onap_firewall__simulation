class Onap:
    """ Based on the metrics ONAP orchestrates the 
    traffic rate generated by the TrafficGenerator

        ONAP receives metrics from vFirewall about the amount of 
    filtered and transmitted packets by vFirewall.

        The goal is to keep the reasonable traffic rate to avoid 
    congestion(in case of bandwidth overutiliization) and to avoid 
    bandwidth underutiliization to keep the line always busy 
    """
    def __init__(   self, 
                    target_rate: float, 
                    threshold_range_low: float, 
                    threshold_range_high: float
                ):
        self.target_rate = target_rate
        self.threshold_range_low = threshold_range_low
        self.threshold_range_high = threshold_range_high
        self.timer = False
        self.measured_rate = 0

    def collectRate(self, measured_rate: float) -> None:
        """ This method sets measured rate by the firewall
        Args:
            float: measured_rate by VFirewall

        Returns:
            None
        """
        self.timer = True
        self.measured_rate = measured_rate
        
    def adjustRate(self, trafficGenerator) -> None:
        """ This method determines if the TrafficGenerator should adjust its rate
            Calculates the adjust_rate coefficient based on the measured_rate. 
            This coefficient will adjust the rate closer to the TARGET_RATE
            Outputs LOG's to the std out
        Args:
            float: measured_rate by VFirewall

        Returns:
            None
        """
        if self.timer and (self.measured_rate < self.threshold_range_low or self.measured_rate > self.threshold_range_high):
            
            if self.measured_rate < self.threshold_range_low:
                print(  "LOG: ONAP - Link underutilized,",
                        "increasing the rate from" , self.measured_rate, 
                        "to", self.target_rate)
            elif self.measured_rate > self.threshold_range_high: 
                print(  "LOG: ONAP - Link overutilized,",
                        "decreasing the rate from" , self.measured_rate, 
                        "to", self.target_rate)

            adjust_rate = self.measured_rate / self.target_rate
            trafficGenerator.adjustRate(adjust_rate)
            self.timer = False
        
        elif self.timer and (self.measured_rate > self.threshold_range_low and self.measured_rate < self.threshold_range_high):
            print(  "LOG: ONAP - Link is in the optimal rate, no changes needed")
            self.timer = False
