import time
import random

class TrafficGenerator:
    """ Generates traffic with a random rate

        Rate is adjusted by ONAP

        Sends the traffic to vFirewall
    """

    def __init__(self, rate: float):
        self.rate = rate
        self.adjust_rate = 1
        self.TIME_COEF = 0.5
        self.time_current = time.time()
        self.period_counter = 0
        
    def sendPacket(self, firewall) -> None:
        """ Simulate a packet transmission 
            Use time lib to delay the time when the packet is sent
            In this way the link speed can be adjusted
            Firewall accepts packets
        Args:
            VFirewall: receives the packet generated by TrafficGenerator

        Returns:
            None
        """

        #Generate a packet
        packet_size = random.randint(32, 64)
        new_packet = Packet(packet_size).generate()
    
        #Send the packet to the firewall
        firewall.accept(new_packet)

        #Simulate the real time rates
        time.sleep(self.TIME_COEF * self.rate * self.adjust_rate)

        #Simulate third party factors which INCREASE/DECREASE traffic rate
        self.simulateRate()

    def adjustRate(self, rate: float) -> None:
        """ Sets the rate to adjust the traffic rate
        Args:
            float: the rate

        Returns:
            None
        """
        self.adjust_rate = rate

    def simulateRate(self) -> None:
        """ Updates the rate randomly to initiate overutilization/underutilization of the bandwidth

            It updates the rate every ~<sec> seconds
        Args:
            None

        Returns:
            None
        """
        sec = 7
        
        diff = int(time.time() - self.time_current)

        if (diff%sec == 0) and (diff/sec != self.period_counter) :
            self.period_counter = diff/sec
            self.rate = random.uniform(0.30, 1.70)
            rate = 1 / (self.TIME_COEF * self.rate * self.adjust_rate )
            print("LOG: TrafficGenerator - Rate suddenly changed:", round(rate, 2), "packets/sec")

class Packet:
    """ Packet class

        Responsible for generating packets of size n
    """

    def __init__(self, size):
        self.bits = [0, 1]   
        self.size = size 

    def generate(self) -> str:
        data = random.choices(self.bits, k = self.size)
        string_data  = ''.join(str(e) for e in data)
        return string_data